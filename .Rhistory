devtools::load_all(".")
# Add NA columns to the iris set for prediction -------------------------------
iris.data <- iris
iris.data[c(1:10),5] <- NA
# Call the automatic statistician ---------------------------------------------
autostatr(data=iris.data, target="Species", type="classif", title="Iris")
# Add NA columns to the iris set for prediction -------------------------------
iris.data <- iris
iris.data[c(1:10),5] <- NA
# Call the automatic statistician ---------------------------------------------
autostatr(data=iris.data, target="Species", type="classif", title="Iris")
devtools::load_all(".")
data(BreastCancer, package = "mlbench")
df = BreastCancer
df = df[complete.cases(df), ]
df$Id = NULL
df[,1] = as.numeric(df[,1])
df[,2] = as.numeric(df[,2])
df[,3] = as.numeric(df[,3])
df[,4] = as.numeric(df[,4])
df[,5] = as.numeric(df[,5])
df[,6] = as.numeric(df[,6])
df[,7] = as.numeric(df[,7])
df[,8] = as.numeric(df[,8])
df[,9] = as.numeric(df[,9])
smp_size <- floor(0.95 * nrow(df))
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- sample(seq_len(nrow(df)), size = smp_size)
train <- df[train_ind, ]
test <- df[-train_ind, ]
autostatr(data = train, data_to_predict = test, target = "Class", type = "classif", title = "Breast Cancer")
devtools::load_all(".")
data(BreastCancer, package = "mlbench")
df = BreastCancer
df = df[complete.cases(df), ]
df$Id = NULL
df[,1] = as.numeric(df[,1])
df[,2] = as.numeric(df[,2])
df[,3] = as.numeric(df[,3])
df[,4] = as.numeric(df[,4])
df[,5] = as.numeric(df[,5])
df[,6] = as.numeric(df[,6])
df[,7] = as.numeric(df[,7])
df[,8] = as.numeric(df[,8])
df[,9] = as.numeric(df[,9])
smp_size <- floor(0.95 * nrow(df))
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- sample(seq_len(nrow(df)), size = smp_size)
train <- df[train_ind, ]
test <- df[-train_ind, ]
autostatr(data = train, data_to_predict = test, target = "Class", type = "classif", title = "Breast Cancer")
devtools::load_all(".")
# Add NA columns to the iris set for prediction -------------------------------
iris.data <- iris
iris.data[c(1:10),5] <- NA
# Call the automatic statistician ---------------------------------------------
autostatr(data=iris.data, target="Species", type="classif", title="Iris")
devtools::load_all(".")
# Add NA columns to the iris set for prediction -------------------------------
iris.data <- iris
iris.data[c(1:10),5] <- NA
# Call the automatic statistician ---------------------------------------------
autostatr(data=iris.data, target="Species", type="classif", title="Iris")
devtools::load_all(".")
devtools::load_all(".")
# Add NA columns to the iris set for prediction -------------------------------
iris.data <- iris
iris.data[c(1:10),5] <- NA
# Call the automatic statistician ---------------------------------------------
autostatr(data=iris.data, target="Species", type="classif", title="Iris")
devtools::load_all(".")
# Add NA columns to the iris set for prediction -------------------------------
iris.data <- iris
iris.data[c(1:10),5] <- NA
# Call the automatic statistician ---------------------------------------------
autostatr(data=iris.data, target="Species", type="classif", title="Iris")
paste("Hi", "Chris")
paste0("Hi", "Chris")
devtools::load_all(".")
# Add NA columns to the iris set for prediction -------------------------------
iris.data <- iris
iris.data[c(1:10),5] <- NA
# Call the automatic statistician ---------------------------------------------
autostatr(data=iris.data, target="Species", type="classif", title="Iris")
devtools::load_all(".")
# Add NA columns to the iris set for prediction -------------------------------
iris.data <- iris
iris.data[c(1:10),5] <- NA
# Call the automatic statistician ---------------------------------------------
autostatr(data=iris.data, target="Species", type="classif", title="Iris")
data(BreastCancer, package = "mlbench")
df = BreastCancer
df = df[complete.cases(df), ]
df$Id = NULL
df[,1] = as.numeric(df[,1])
df[,2] = as.numeric(df[,2])
df[,3] = as.numeric(df[,3])
df[,4] = as.numeric(df[,4])
df[,5] = as.numeric(df[,5])
df[,6] = as.numeric(df[,6])
df[,7] = as.numeric(df[,7])
df[,8] = as.numeric(df[,8])
df[,9] = as.numeric(df[,9])
smp_size <- floor(0.95 * nrow(df))
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- sample(seq_len(nrow(df)), size = smp_size)
train <- df[train_ind, ]
test <- df[-train_ind, ]
autostatr(data = train, data_to_predict = test, target = "Class", type = "classif", title = "Breast Cancer")
devtools::load_all(".")
data(BreastCancer, package = "mlbench")
df = BreastCancer
df = df[complete.cases(df), ]
df$Id = NULL
df[,1] = as.numeric(df[,1])
df[,2] = as.numeric(df[,2])
df[,3] = as.numeric(df[,3])
df[,4] = as.numeric(df[,4])
df[,5] = as.numeric(df[,5])
df[,6] = as.numeric(df[,6])
df[,7] = as.numeric(df[,7])
df[,8] = as.numeric(df[,8])
df[,9] = as.numeric(df[,9])
smp_size <- floor(0.95 * nrow(df))
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- sample(seq_len(nrow(df)), size = smp_size)
train <- df[train_ind, ]
test <- df[-train_ind, ]
autostatr(data = train, data_to_predict = test, target = "Class", type = "classif", title = "Breast Cancer")
devtools::load_all(".")
data(BreastCancer, package = "mlbench")
df = BreastCancer
df = df[complete.cases(df), ]
df$Id = NULL
df[,1] = as.numeric(df[,1])
df[,2] = as.numeric(df[,2])
df[,3] = as.numeric(df[,3])
df[,4] = as.numeric(df[,4])
df[,5] = as.numeric(df[,5])
df[,6] = as.numeric(df[,6])
df[,7] = as.numeric(df[,7])
df[,8] = as.numeric(df[,8])
df[,9] = as.numeric(df[,9])
smp_size <- floor(0.95 * nrow(df))
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- sample(seq_len(nrow(df)), size = smp_size)
train <- df[train_ind, ]
test <- df[-train_ind, ]
autostatr(data = train, data_to_predict = test, target = "Class", type = "classif", title = "Breast Cancer")
devtools::use_package("checkmate")
2<=1
2-1<=1
2-1<=1
2-2<=1
devtools::load_all(".")
# Add NA columns to the iris set for prediction -------------------------------
iris.data <- iris
iris.data[c(1:10),5] <- NA
# Call the automatic statistician ---------------------------------------------
autostatr(data=iris.data, target="Species", type="classif", title="Iris")
?assertDataFrame
devtools::load_all(".")
# Add NA columns to the iris set for prediction -------------------------------
iris.data <- iris
iris.data[c(1:10),5] <- NA
# Call the automatic statistician ---------------------------------------------
autostatr(data=iris.data, target="Species", type="classif", title="Iris")
# Add NA columns to the iris set for prediction -------------------------------
iris.data <- iris
iris.data[c(1:10),5] <- NA
library("mlbench")
data(PimaIndiansDiabetes, package = "mlbench")
df <- PimaIndiansDiabetes
# Select test split -----------------------------------------------------------
smp_size <- floor(0.99 * nrow(df))
# Set the seed to make partition reproducible ---------------------------------
set.seed(123)
train_ind <- sample(seq_len(nrow(df)), size = smp_size)
train <- df[train_ind, ]
test <- df[-train_ind, ]
# Call the automatic statistician ---------------------------------------------
autostatr(data = train, data_to_predict = test, target = "diabetes", type = "classif", title = "Diabetes")
devtools::load_all(".")
# Call the automatic statistician ---------------------------------------------
autostatr(data = train, data_to_predict = test, target = "diabetes", type = "classif", title = "Diabetes")
devtools::load_all(".")
autostatr(train, test, target = "Type", "classif")
library(mlbench)
library(mlr)
data("Glass")
## 75% of the sample size
smp_size <- floor(0.75 * nrow(Glass))
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- sample(seq_len(nrow(Glass)), size = smp_size)
train <- Glass[train_ind, ]
test <- Glass[-train_ind, ]
autostatr(train, test, target = "Type", "classif")
autostatr(train, test, target = "Type", "classif", title= "Glass")
str(train)
summary(train)
train[,"Type"] = as.factor(train[,"Type"])
summary(train)
str(train)
train[,"Type"] = as.numeric(train[,"Type"])
str(train)
summary(train)
train[,"Type"] = as.factor(train[,"Type"])
summary(train)
str(train)
autostatr(train, test, target = "Type", "classif", title= "Glass")
View(Glass)
train[,"Type"] = as.character(train[,"Type"])
str(train)
train[,"Type"] = as.factor(train[,"Type"])
str(train)
train[,"Type"] = as.character(train[,"Type"])
test[,"Type"] = as.character(test[,"Type"])
autostatr(train, test, target = "Type", "classif", title= "Glass")
train
test
str(test)
library(mlbench)
library(mlr)
data("Glass")
## 75% of the sample size
smp_size <- floor(0.75 * nrow(Glass))
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- sample(seq_len(nrow(Glass)), size = smp_size)
train <- Glass[train_ind, ]
test <- Glass[-train_ind, ]
str(train)
str(test)
library(caret)
install.packages(caret)
install.packages("caret")
library(mlbench)
library(mlr)
library(caret)
data("Glass")
## 75% of the sample size
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- createDataPartition(Glass$Type, p = .75,
list = FALSE,
times = 1)
train <- Glass[train_ind, ]
test <- Glass[-train_ind, ]
autostatr(train, test, target = "Type", "classif", title= "Glass")
train
test
devtools::load_all(".")
devtools::load_all(".")
library(mlbench)
library(mlr)
library(caret)
data("Glass")
Glass = Glass[1:137,]
Glass[,"Type"] = as.factor(as.numeric(Glass[,"Type"]))
## 75% of the sample size
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- createDataPartition(Glass$Type, p = .75,
list = FALSE,
times = 1)
train <- Glass[train_ind, ]
test <- Glass[-train_ind, ]
autostatr(data = train, data_to_predict =  test, target = "Type", type = "classif", title= "Glass")
devtools::load_all(".")
devtools::load_all(".")
library(mlbench)
library(mlr)
library(caret)
data("Glass")
Glass = Glass[1:137,]
Glass[,"Type"] = as.factor(as.numeric(Glass[,"Type"]))
## 75% of the sample size
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- createDataPartition(Glass$Type, p = .75,
list = FALSE,
times = 1)
train <- Glass[train_ind, ]
test <- Glass[-train_ind, ]
autostatr(data = train, data_to_predict =  test, target = "Type", type = "classif", title= "Glass")
devtools::load_all(".")
library(mlbench)
library(mlr)
library(caret)
data("Glass")
Glass = Glass[1:137,]
Glass[,"Type"] = as.factor(as.numeric(Glass[,"Type"]))
## 75% of the sample size
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- createDataPartition(Glass$Type, p = .75,
list = FALSE,
times = 1)
train <- Glass[train_ind, ]
test <- Glass[-train_ind, ]
autostatr(data = train, data_to_predict =  test, target = "Type", type = "classif", title= "Glass")
devtools::load_all(".")
library(mlbench)
library(mlr)
library(caret)
data("Glass")
Glass = Glass[1:137,]
Glass[,"Type"] = as.factor(as.numeric(Glass[,"Type"]))
## 75% of the sample size
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- createDataPartition(Glass$Type, p = .75,
list = FALSE,
times = 1)
train <- Glass[train_ind, ]
test <- Glass[-train_ind, ]
autostatr(data = train, data_to_predict =  test, target = "Type", type = "classif", title= "Glass")
devtools::load_all(".")
library(mlbench)
library(mlr)
library(caret)
data("Glass")
Glass = Glass[1:137,]
Glass[,"Type"] = as.factor(as.numeric(Glass[,"Type"]))
## 75% of the sample size
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- createDataPartition(Glass$Type, p = .75,
list = FALSE,
times = 1)
train <- Glass[train_ind, ]
test <- Glass[-train_ind, ]
autostatr(data = train, data_to_predict =  test, target = "Type", type = "classif", title= "Glass")
source('~/workspace/AutoStatR/inst/example/glass.R', echo=TRUE)
devtools::load_all(".")
library(mlbench)
library(mlr)
library(caret)
data("Glass")
Glass = Glass[1:137,]
Glass[,"Type"] = as.factor(as.numeric(Glass[,"Type"]))
## 75% of the sample size
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- createDataPartition(Glass$Type, p = .75,
list = FALSE,
times = 1)
train <- Glass[train_ind, ]
test <- Glass[-train_ind, ]
autostatr(data = train, data_to_predict =  test, target = "Type", type = "classif", title= "Glass")
devtools::load_all(".")
library(mlbench)
library(mlr)
library(caret)
data("Glass")
Glass = Glass[1:137,]
Glass[,"Type"] = as.factor(as.numeric(Glass[,"Type"]))
## 75% of the sample size
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- createDataPartition(Glass$Type, p = .75,
list = FALSE,
times = 1)
train <- Glass[train_ind, ]
test <- Glass[-train_ind, ]
autostatr(data = train, data_to_predict =  test, target = "Type", type = "classif", title= "Glass")
devtools::load_all(".")
library(mlbench)
library(mlr)
library(caret)
data("Glass")
Glass = Glass[1:137,]
Glass[,"Type"] = as.factor(as.numeric(Glass[,"Type"]))
## 75% of the sample size
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- createDataPartition(Glass$Type, p = .75,
list = FALSE,
times = 1)
train <- Glass[train_ind, ]
test <- Glass[-train_ind, ]
autostatr(data = train, data_to_predict =  test, target = "Type", type = "classif", title= "Glass")
devtools::load_all(".")
library(mlbench)
library(mlr)
library(caret)
data("Glass")
Glass = Glass[1:137,]
Glass[,"Type"] = as.factor(as.numeric(Glass[,"Type"]))
## 75% of the sample size
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- createDataPartition(Glass$Type, p = .75,
list = FALSE,
times = 1)
train <- Glass[train_ind, ]
test <- Glass[-train_ind, ]
autostatr(data = train, data_to_predict =  test, target = "Type", type = "classif", title= "Glass")
devtools::load_all(".")
library(mlbench)
library(mlr)
library(caret)
data("Glass")
Glass = Glass[1:137,]
Glass[,"Type"] = as.factor(as.numeric(Glass[,"Type"]))
## 75% of the sample size
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- createDataPartition(Glass$Type, p = .75,
list = FALSE,
times = 1)
train <- Glass[train_ind, ]
test <- Glass[-train_ind, ]
autostatr(data = train, data_to_predict =  test, target = "Type", type = "classif", title= "Glass")
devtools::load_all(".")
library(mlbench)
library(mlr)
library(caret)
data("Glass")
Glass = Glass[1:137,]
Glass[,"Type"] = as.factor(as.numeric(Glass[,"Type"]))
## 75% of the sample size
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- createDataPartition(Glass$Type, p = .75,
list = FALSE,
times = 1)
train <- Glass[train_ind, ]
test <- Glass[-train_ind, ]
autostatr(data = train, data_to_predict =  test, target = "Type", type = "classif", title= "Glass")
devtools::load_all(".")
library(mlbench)
library(mlr)
library(caret)
data("Glass")
Glass = Glass[1:137,]
Glass[,"Type"] = as.factor(as.numeric(Glass[,"Type"]))
## 75% of the sample size
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- createDataPartition(Glass$Type, p = .75,
list = FALSE,
times = 1)
train <- Glass[train_ind, ]
test <- Glass[-train_ind, ]
autostatr(data = train, data_to_predict =  test, target = "Type", type = "classif", title= "Glass")
devtools::load_all(".")
library(mlbench)
library(mlr)
library(caret)
data("Glass")
Glass = Glass[1:137,]
Glass[,"Type"] = as.factor(as.numeric(Glass[,"Type"]))
## 75% of the sample size
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- createDataPartition(Glass$Type, p = .75,
list = FALSE,
times = 1)
train <- Glass[train_ind, ]
test <- Glass[-train_ind, ]
autostatr(data = train, data_to_predict =  test, target = "Type", type = "classif", title= "Glass")
Glass
colnames(Glass)
devtools::load_all(".")
library(mlbench)
library(mlr)
library(caret)
data("Glass")
Glass = Glass[1:137,]
Glass[,"Type"] = as.factor(as.numeric(Glass[,"Type"]))
## 75% of the sample size
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- createDataPartition(Glass$Type, p = .75,
list = FALSE,
times = 1)
train <- Glass[train_ind, ]
test <- Glass[-train_ind, ]
autostatr(data = train, data_to_predict =  test, target = "Type", type = "classif", title= "Glass")
library(mlbench)
library(mlr)
library(caret)
data("Glass")
## 75% of the sample size
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- createDataPartition(Glass$Type, p = .75,
list = FALSE,
times = 1)
train <- Glass[train_ind, ]
test <- Glass[-train_ind, ]
autostatr(data = train, data_to_predict =  test, target = "Type", type = "classif", title= "Glass")
unique(train[,"Type"])
train[, "Type"] == 4
Glass[,"Type"]==4
any(Glass[,"Type"]==4)
data("Glass")
any(Glass[,"Type"]==4)
Glass[,"Type"]
test[,"Type"]
unique(test[,"Type"])
?Predictor$new
?iml::Predictor
?iml::FeatureImp
devtools::load_all(".")
